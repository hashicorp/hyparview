// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package hyparview

type Message interface {
	To() *Node
	SetTo(*Node) Message
}

func (r *JoinRequest) To() *Node {
	return r.to
}

func (r *JoinRequest) AssocTo(n *Node) *Node {
	o := *r
	o.to = n
	return &o
}

type Message interface {
	To() *Node
	SetTo(*Node) Message
}

func (r *ForwardJoinRequest) To() *Node {
	return r.to
}

func (r *ForwardJoinRequest) AssocTo(n *Node) *Node {
	o := *r
	o.to = n
	return &o
}

type Message interface {
	To() *Node
	SetTo(*Node) Message
}

func (r *DisconnectRequest) To() *Node {
	return r.to
}

func (r *DisconnectRequest) AssocTo(n *Node) *Node {
	o := *r
	o.to = n
	return &o
}

type Message interface {
	To() *Node
	SetTo(*Node) Message
}

func (r *NeighborRequest) To() *Node {
	return r.to
}

func (r *NeighborRequest) AssocTo(n *Node) *Node {
	o := *r
	o.to = n
	return &o
}

type Message interface {
	To() *Node
	SetTo(*Node) Message
}

func (r *NeighborRefuse) To() *Node {
	return r.to
}

func (r *NeighborRefuse) AssocTo(n *Node) *Node {
	o := *r
	o.to = n
	return &o
}

type Message interface {
	To() *Node
	SetTo(*Node) Message
}

func (r *ShuffleRequest) To() *Node {
	return r.to
}

func (r *ShuffleRequest) AssocTo(n *Node) *Node {
	o := *r
	o.to = n
	return &o
}

type Message interface {
	To() *Node
	SetTo(*Node) Message
}

func (r *ShuffleReply) To() *Node {
	return r.to
}

func (r *ShuffleReply) AssocTo(n *Node) *Node {
	o := *r
	o.to = n
	return &o
}

type Message interface {
	To() *Node
	SetTo(*Node) Message
}

func (r *Gossip) To() *Node {
	return r.to
}

func (r *Gossip) AssocTo(n *Node) *Node {
	o := *r
	o.to = n
	return &o
}
